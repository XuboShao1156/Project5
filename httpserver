#!/usr/bin/env python3

import gzip
import sys
import time
import requests.utils
from cache import Cache, MEM_MIN_FREQ, DISK_LIMIT
from http.server import BaseHTTPRequestHandler, ThreadingHTTPServer

PORT = int(sys.argv[1])
ORIGIN = sys.argv[2]

class CdnHttp(BaseHTTPRequestHandler):
    """
    Edge replica server to retrieve page from origin server and cache.
    """
    protocol_version = 'HTTP/1.1'

    cache = Cache(mem_min_freq=MEM_MIN_FREQ, disk_threshold=DISK_LIMIT, origin=ORIGIN, prefetch_size=10)
    session = requests.session()

    def do_GET(self, cache=cache, session=session):
        if self.path == '/grading/beacon': # health check for beacon clients
            self.send_response(204)
            self.send_header('Content-Type', 'text/html')
            self.end_headers()
            return

        start = time.time()

        # retrieve page
        page = requests.utils.unquote(self.path[1:])
        content = cache.get(page)
        if len(content) == 0:
            # print('downloading from origin for page {}...'.format(page))

            resp = session.get('http://{}:8080/{}'.format(ORIGIN, page))
            if resp.status_code == 404:
                self.send_error(404, 'Page not Found')
                return

            decompressed = resp.content
            content = gzip.compress(resp.content)
            cache.put(page, content)
        else:
            decompressed = gzip.decompress(content)

        # print('process time: ' + str(time.time() - start), end='\n')

        # send response
        self.send_response(200)
        self.send_header('Connection', 'keep-alive')
        self.send_header('Content-Type', 'text/html')
        self.send_header('Content-Length', str(len(decompressed)))
        self.end_headers()

        self.wfile.write(decompressed)

        # print('total time: ' + str(time.time() - start), end='\n')


if __name__ == '__main__':
    with ThreadingHTTPServer(('0.0.0.0', 40007), CdnHttp) as httpd:
        try:
            # print('Serving on port %s' % PORT)
            httpd.serve_forever()
        finally:
            httpd.server_close()
